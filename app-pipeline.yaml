AWSTemplateFormatVersion: "2010-09-09"

Description: >
  AWS CloudFormation Sample Template Continuous Delievery: This template
  builds an AWS CodePipeline pipeline that implements a continuous delivery release
  process for AWS CloudFormation stacks. Submit a CloudFormation source artifact
  to an Amazon S3 location before building the pipeline. The pipeline uses the
  artifact to automatically create stacks and change sets.
  **WARNING** This template creates Amazon EC2 instances. You will be billed
  for the AWS resources used when you create a stack using this template.

Parameters:
  PipelineName:
    Description: A name for pipeline
    Type: String
  GitHubRepo:
    Type: String
    Description: Github repo name (e.g. github.com/Org/RepoName then RepoName)
  GitHubBranch:
    Type: String
    Default: 'master'
    Description: The github branch to monitor for changes.
  GitHubToken:
    Type: String
    Description: The Github Token which has access to the repository.
  GitHubUser:
    Type: String
    Description: The Github User/Organisation under which the repository is hosted.
  DeployEnvironment:
    Type: String
    Description: Specify the environment
    AllowedValues:
      - production
      - staging
      - hotfix
      - development
      - feature
    ConstraintDescription: Must specify production, staging, hotfix, development or feature.
  Email:
    Description: The email address where CodePipeline sends pipeline notifications
    Type: String
Mappings:
  DockerTagPhraseFromEnv:
    production:
      value: ""
    staging:
      value: "candidate"
    hotfix:
      value: "hotfix"
    development:
      value: "snapshot"
    feature:
      value: "feature"
Conditions:
  IsProductionCondition: !Equals [ !Ref DeployEnvironment, production ]
  IsStagingCondition: !Equals [ !Ref DeployEnvironment, staging ]
  IsHotfixCondition: !Equals [ !Ref DeployEnvironment, hotfix ]
  IsDevelopmentCondition: !Equals [ !Ref DeployEnvironment, development ]
  IsFeatureCondition: !Equals [ !Ref DeployEnvironment, feature ]
Resources:
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cfn-${TagName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cb-${TagName}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
              AWS:
                - !If [IsProductionCondition, !Sub "arn:aws:iam::${SourceECSAWSAccountId}:root", !Ref "AWS::NoValue"]
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:*

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cp-${TagName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                  - lambda:*

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub lambda-${TagName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "lambda.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:*
                  - autoscaling:Describe*
                  - autoscaling:UpdateAutoScalingGroup
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStack*
                  - cloudformation:UpdateStack
                  - cloudwatch:GetMetricStatistics
                  - ec2:Describe*
                  - elasticloadbalancing:*
                  - ecs:*
                  - iam:*
                  - codepipeline:*
                  - logs:*

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain